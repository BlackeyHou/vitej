package org.vitej.core.utils;

import org.vitej.core.protocol.methods.Address;
import org.vitej.core.protocol.methods.request.TransactionParams;
import org.vitej.core.wallet.Crypto;

public final class ContractUtils {
    /**
     * Generate contract address by create request transaction parameters
     *
     * @param transaction Transaction info. address, height, previousHash fields are required
     * @return Contract address
     */
    public static Address getNewContractAddress(TransactionParams transaction) {
        return new Address(
                Crypto.digest(20, BytesUtils.merge(transaction.getAddressRaw().getBytes(),
                        BytesUtils.leftPadBytes(BytesUtils.longToBytes(transaction.getHeightRaw()), 8),
                        transaction.getPreviousHashRaw().getBytes())),
                1);
    }

    /**
     * Generate create contract request block data
     *
     * @param bytecode          Bytecode generated by solidity++ compiler
     * @param encodedParameters Encoded constructor parameters
     * @param responseLatency   The number of snapshot blocks by which request sent to the contract
     *                          has been confirmed before responding to the transaction. The value
     *                          range is 0-75. The value 0 means that there is no need to wait and
     *                          the respond block will be produced immediately. If timestamp,
     *                          snapshot block height, or random number is used in the contract,
     *                          this parameter must be greater than zero. Larger response latency
     *                          means slower contract response and each response transaction will
     *                          consume more extra quota.
     * @param randomDegree      The number of snapshot blocks having random seed by which request
     *                          sent to this contract is confirmed before responding to the
     *                          transaction. The value range is 0-75. The value 0 indicates that
     *                          there is no need to wait for the request transaction to be included
     *                          in a snapshot block containing random number. If random number
     *                          instruction is used in the contract, the value is required to be
     *                          above 0. The larger the value, the more secure the random number.
     *                          This parameter must be no less than response latency.
     * @param quotaMultiplier   This parameter defines how many times the quota is consumed for
     *                          requested transaction when the contract is called. The quota
     *                          charged by the contract response transaction is not affected. The
     *                          value ranges from 10 to 100, which means that the quota consumed is
     *                          1-10 times. For example, a value of 15 means that the requested
     *                          transaction to the contract is charged 1.5 times quota.
     * @return Encoded data
     */
    public static byte[] getCreateContractData(byte[] bytecode, byte[] encodedParameters, int responseLatency, int randomDegree, int quotaMultiplier) {
        return BytesUtils.merge(
                new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, (byte) responseLatency, (byte) randomDegree, (byte) quotaMultiplier},
                bytecode,
                encodedParameters);
    }

    /**
     * Generate create contract request block data, using default values for responseLatency,
     * randomDegree and quotaMultiplier.
     *
     * @param bytecode          Bytecode generated by solidity++ compiler
     * @param encodedParameters Encoded constructor parameters
     * @return Encoded data
     */
    public static byte[] getCreateContractData(byte[] bytecode, byte[] encodedParameters) {
        return getCreateContractData(bytecode, encodedParameters, 0, 0, 10);
    }
}
